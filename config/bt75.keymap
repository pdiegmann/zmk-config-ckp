#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#define HOST_OS 2
#include "../zmk-nodefree-config/helper.h"
//#include "../zmk-nodefree-config/international_chars/german.dtsi"
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/ext_power.h>

// tap: sticky shift | double tap: capsword
//ZMK_BEHAVIOR(ss_cw, tap_dance,
//    tapping-term-ms = <200>;
//    bindings = <&sk LSHFT>, <&caps_word>;
//)

ZMK_UNICODE_PAIR( de_ae,   N0, N0,  E, N4,   N0, N0,  C, N4 )
ZMK_UNICODE_PAIR( de_oe,   N0, N0,  F, N6,   N0, N0,  D, N6 )
ZMK_UNICODE_PAIR( de_ue,   N0, N0,  F,  C,   N0, N0,  D,  C )


/ {
	keymap {
		compatible = "zmk,keymap";
		default_layer {
				// ------------------------------------------------------------------------------------------------------------
				// | ESC | F1  | F2  | F3  | F4  | F5  | F6  | F7  | F9  | F9  | F10 | F11 | F12 | PSCRN | INS | DEL	|
				// |  `  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8  |  9  |  0  |  -  |  =  |   BKSP   | HOME	|
				// | TAB  |  Q  |  W  |  E  |  R  |  T  |  Y  |  U  |  I  |  O  |  P  |  [  |  ]  |    \    | PG UP |
				// | CAPS  |  A  |  S  |  D  |  F  |  G  |  H  |  J  |  K  |  L  |  ;  |  '  |     ENTER     | PG DN |
				// |  SHIFT    |  Z  |  X  |  C  |  V  |  B  |  N  |  M  |  ,  |  .  | /   |    SHIFT |  UP  |  END  |
				// |  CTL  |  WIN  |  ALT  |            SPACE               | ALT | 1  | CTRL |  LEFT | DOWN | RIGHT |
				// ------------------------------------------------------------------------------------------------------------
			bindings = <
				&kp ESC		&kp C_BRIGHTNESS_DEC 	&kp C_BRIGHTNESS_INC 	&rgb_ug RGB_TOG 	&rgb_ug RGB_EFF 	&bl BL_DEC 	&bl BL_INC 	&kp C_PREV 	&kp C_PP 	&kp C_NEXT 	&none 			&none 				&kp HASH 				&kp C_AL_LOCK 	&kp C_MUTE 	&kp C_MUTE
				&kp GRAVE 	&kp N1 					&kp N2 					&kp N3 				&kp N4 				&kp N5 		&kp N6 		&kp N7 		&kp N8 		&kp N9 		&kp N0 			&de_eszett 			&kp EQUAL 				&kp BSPC 					&none
				&kp TAB		&kp Q 					&kp W 					&kp E 				&kp R 				&kp T 		&kp Z 		&kp U 		&kp I 		&kp O 		&kp P 			&de_ue 				&kp RBKT 				&kp BSLH					&none
				&mo 1 		&kp A 					&kp S 					&kp D 				&kp F 				&kp G 		&kp H 		&kp J 		&kp K 		&kp L 		&de_oe 			&de_ae 				&kp RET 											&kp PG_UP
				&kp LSHFT 				 			&kp Y 					&kp X 				&kp C 				&kp V 		&kp B 		&kp N 		&kp M 		&kp COMMA 	&kp DOT 		&kp MINUS			&kp LC(LS(LG(LALT))) 					&kp UP 		&kp PG_DN
				&kp LCTRL 	&kp LALT 				&kp LCMD 														&kp SPACE 													&kp RCMD 		&mo 1 				&kp LC(LS(LALT))		&kp LEFT 		&kp DOWN 	&kp RIGHT
			>;
			sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;
		};
		raise {
			bindings = <
				&trans		&rgb_ug RGB_BRD 		&rgb_ug RGB_BRI 		&rgb_ug RGB_SPD 	&rgb_ug RGB_SPI 	&rgb_ug RGB_EFF 	&trans 		&trans	&trans	&trans		&trans		&trans			&trans		&trans			&trans		&trans
				&kp ESC		&kp F1 					&kp F2 					&kp F3 				&kp F4 				&kp F5 				&kp F6 		&kp F7	&kp F8	&kp F9		&kp F10		&kp F11			&kp F12		&trans 			&trans		&trans
				&trans		&trans 					&kp UP 					&trans 				&trans 				&trans 				&trans 		&trans	&trans	&trans		&trans		&trans			&trans		&trans			&trans
				&trans		&trans 					&trans 					&trans 				&trans 				&trans 				&trans 		&trans	&trans	&trans		&trans		&trans						&bootloader					&trans
				&trans		&trans					&trans 					&trans 				&trans 				&trans 				&trans 		&trans	&trans	&trans		&trans		&trans			&trans 		&trans 			&trans 		&trans
				&bt BT_PRV 	&bt BT_NXT				&trans              	&trans																								&trans		&trans			&trans		&trans			&trans		&trans
			>;
			sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;
		};
	};
};
